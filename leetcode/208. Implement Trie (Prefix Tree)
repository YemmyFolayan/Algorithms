# Recursive
# O(key_size) / O(key_size * keys)
class Trie:

    def __init__(self):
        
        self.isWord = False
        self.children = defaultdict(Trie)

    def insert(self, word: str) -> None:
        
        if not word:
            self.isWord = True
            return
        
        key = word[0]
        self.children[key].insert(word[1:])

    def search(self, word: str) -> bool:
        
        if not word:
            return self.isWord
        
        key = word[0]
        
        if key not in self.children:
            return False
        
        return self.children[key].search(word[1:])
        
    def startsWith(self, prefix: str) -> bool:
        
        if not prefix:
            return True
        
        key = prefix[0]
        
        if key not in self.children:
            return False
        
        return self.children[key].startsWith(prefix[1:])

# Independent classes
# O(key_size) / O(key_size * keys)
class TrieNode:
    
    def __init__(self):
        
        self.children = defaultdict(TrieNode)
        self.isWord = False

class Trie:

    def __init__(self):
        self.root = TrieNode()

    def insert(self, word: str) -> None:
        
        curr = self.root
        
        for char in word:
            curr = curr.children[char]
            
        curr.isWord = True

    def search(self, word: str) -> bool:
        
        curr = self.root
        
        for char in word:
            
            if char not in curr.children:
                return False
            
            curr = curr.children[char]
            
        return curr.isWord
        
    def startsWith(self, prefix: str) -> bool:
        
        curr = self.root
        
        for char in prefix:
            
            if char not in curr.children:
                return False
            
            curr = curr.children[char]
            
        return True
