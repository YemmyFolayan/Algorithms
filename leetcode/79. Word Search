# O(N * W) / O(W)
class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
    
        for i in range(len(board)):
            for j in range(len(board[0])):
                if self.dfs(board, word, i, j): 
                    return True
        return False
                
    def dfs(self, board, word, i, j, visited = set()):

        if not word: 
            return True
        
        in_bounds = 0 <= i < len(board) and 0 <= j < len(board[0])
        if not in_bounds:
            return False
        
        if board[i][j] != word[0]: 
            return False
    
        board[i][j] = -1
        for x, y in [(-1,0),(0,-1),(1,0),(0,1)]:
            if self.dfs(board, word[1:], i+x, j+y, visited): 
                return True
            
        board[i][j] = word[0]
        return False
