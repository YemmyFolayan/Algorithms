class Solution:
    # naive
    # O(n logn) / O(n)
    def sortedSquares(self, A: List[int]) -> List[int]:
        squares = [a**2 for a in A]
        squares.sort()
        return squares
       
    # improved
    # O (n) / O(n)
    def sortedSquares(self, A: List[int]) -> List[int]:
        r, size = 0, len(A)
        while r < size and A[r] < 0:
            r +=1
        l, ans = r-1, []
        while l > -1 or r < size:
            if l > -1 and r < size:
                if abs(A[l]) < A[r]:
                    ans.append(A[l]*A[l])
                    l -=1
                else: 
                    ans.append(A[r]*A[r])
                    r +=1
            elif l > -1: 
                ans.append(A[l]*A[l])
                l -=1
            else: 
                ans.append(A[r]*A[r])
                r +=1
        return ans
