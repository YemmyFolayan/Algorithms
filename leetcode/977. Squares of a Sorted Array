class Solution:
    # naive
    # O(n logn) / O(n)
    def sortedSquares(self, A: List[int]) -> List[int]:
        squares = [a**2 for a in A]
        squares.sort()
        return squares
       
    # improved
    # O (n) / O(n)
    def sortedSquares(self, A: List[int]) -> List[int]:
        r, size = 0, len(A)
        while r < size and A[r] < 0:
            r +=1
        l, ans = r-1, []
        while l > -1 or r < size:
            vl = abs(A[l]) if l > -1 else float('inf')
            vr = A[r] if r < size else float('inf')
            if vl < vr:
                ans.append(vl*vl)
                l -=1
            else:
                ans.append(vr*vr)
                r +=1
        return ans
