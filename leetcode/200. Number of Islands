# Iterative DFS - O(m*n) / O(m*n)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, ans = len(grid), 0
        n = len(grid[0]) if m else 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    self.dfs(grid, (i, j), (m, n))
                    ans+=1
        return ans
                    
    def dfs(self, grid, start, bounds):
        stack = collections.deque([start])
        while stack:
            i, j = stack.pop()
            if 0 <= i < bounds[0] and 0 <= j < bounds[1] and grid[i][j] == '1':
                grid[i][j] = -1
                for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                    stack.append((i+x, j+y))

# Recursive DFS - O(m*n) / O(m*n)
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, ans = len(grid), 0
        n = len(grid[0]) if m else 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    self.dfs(grid, (i, j), (m, n))
                    ans+=1
        return ans
                    
    def dfs(self, grid, start, bounds):
        i, j = start
        if 0 <= i < bounds[0] and 0 <= j < bounds[1] and grid[i][j] == '1':
            grid[i][j] = -1
            for x, y in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
                self.dfs(grid, (i+x, j+y), bounds)
