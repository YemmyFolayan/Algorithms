# O(n*w) / O(u) - u = unique chars in S
class Solution:
    def expressiveWords(self, S: str, words: List[str]) -> int:
        exprs, last, size, ans = [], 0, len(S), 0
        if not size: return ans
        for i, char in enumerate(S):
            if i == size-1 or char != S[i+1]:
                exprs.append((char, i-last+1))
                last = i+1
        groups = len(exprs)
        for w in words:
            curr, last, stretch, size = 0, 0, True, len(w)
            for i, char in enumerate(w):
                if curr >= groups or char != exprs[curr][0]:
                    break
                if i == size-1 or char != w[i+1]:
                    count, req = i-last+1, exprs[curr][1]
                    if count > req or (count < req and req < 3):
                        stretch = False
                    curr+=1
                    last = i+1
            else:
                if curr == groups: 
                    ans+=1
        return ans

# O(n*w) / O(w) - w = max word len
class Solution:
    def expressiveWords(self, S: str, words: List[str]) -> int:
        
        stretchy_words = 0
        
        for word in words:
            if self.isWordStretchy(S, word):
                stretchy_words +=1
            
        return stretchy_words
    
    def isWordStretchy(self, s, word):
        
        # word is stretchy 
        if not s and not word:
            return True
        
        # word is a substring of s, or s is shorter than word
        if s and not word or len(s) < len(word):
            return False
        
        s_char, s_len, s_new = self.getNextGroup(s)
        w_char, w_len, w_new = self.getNextGroup(word)
        
        # if the chars are diff, the word is longer, or a stretch is needed <3
        if s_char != w_char or s_len < w_len or (s_len != w_len and s_len < 3):
            return False
        
        return self.isWordStretchy(s_new, w_new)
        
    def getNextGroup(self, word):
    
        for i, char in enumerate(word):
            next_i = i+1
            if i == len(word)-1 or char != word[next_i]:
                return (char, next_i, word[next_i:])
  
# O(n*w) / O(u) - u = unique chars in S
class Solution:
    def expressiveWords(self, S: str, words: List[str]) -> int:
        
        if not S:
            return 0
        
        s_groups, s_size = [], len(S)
        
        while S:
            s_group, S = self.getNextGroup(S)
            s_groups.append(s_group)
                            
        stretchy_words, num_groups = 0, len(s_groups)
        
        for word in words:
            for s_group in s_groups:
                
                if not word:
                    break
                    
                w_group, word = self.getNextGroup(word)
                too_big = w_group[1] > s_group[1]
                not_elastic = w_group[1] < s_group[1] and s_group[1] < 3
                
                if s_group[0] != w_group[0] or too_big or not_elastic:
                    break
            else:
                if not word:
                    stretchy_words +=1
        return stretchy_words
    
    def getNextGroup(self, word):
        
        for i, char in enumerate(word):
            next_i = i+1
            if i == len(word)-1 or char != word[next_i]:
                return [(char, next_i), word[next_i:]]
