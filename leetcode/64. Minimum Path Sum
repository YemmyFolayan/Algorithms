# O(m*n) / O(m*n)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0]) if m else 0
        
        return self.pathTraverse(grid, m-1, n-1, 0, 0, {})
        
    def pathTraverse(self, grid, lm, ln, i, j, cache):
        
        key = (i, j)
        
        if key in cache:
            return cache[key]
        
        if i == lm and j == ln:
            return grid[i][j]
        
        min_sum = float('inf')

        if i < lm:
            min_sum = min(min_sum, self.pathTraverse(grid, lm, ln, i+1, j, cache))
            
        if j < ln:
            min_sum = min(min_sum, self.pathTraverse(grid, lm, ln, i, j+1, cache))
            
        cache[key] = min_sum+grid[i][j]   
        return cache[key]
