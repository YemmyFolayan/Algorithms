# Recursion - Top Down
# O(m*n) / O(m*n)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0]) if m else 0
        
        return self.pathTraverse(grid, m-1, n-1, 0, 0, {})
        
    def pathTraverse(self, grid, lm, ln, i, j, cache):
        
        key = (i, j)
        
        if key in cache:
            return cache[key]
        
        if i == lm and j == ln:
            return grid[i][j]
        
        min_sum = float('inf')

        if i < lm:
            min_sum = min(min_sum, self.pathTraverse(grid, lm, ln, i+1, j, cache))
            
        if j < ln:
            min_sum = min(min_sum, self.pathTraverse(grid, lm, ln, i, j+1, cache))
            
        cache[key] = min_sum+grid[i][j]   
        return cache[key]

# DP - Bottom Up
# O(m*n) / O(m*n)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0]) if m else 0
                
        dp = [[0]*n]*m
        
        l_m = m-1
        l_n = n-1
        
        for i in range(l_m, -1, -1):
            for j in range(l_n, -1, -1):
                
                curr_val = grid[i][j]
                
                if i == l_m and j == l_n:
                    dp[i][j] = curr_val
                    continue 
                    
                down_min = dp[i+1][j] if i!=l_m else float('inf')
                right_min = dp[i][j+1] if j!=l_n else float('inf')
                
                dp[i][j] = curr_val + min(down_min, right_min)
                    
        return dp[0][0]
     
# DP - Bottom Up
# O(m*n) / O(n)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0]) if m else 0
        
        dp = [0]*n
        
        l_m = m-1
        l_n = n-1
        
        for i in range(l_m, -1, -1):
            for j in range(l_n, -1, -1):
                
                curr_val = grid[i][j]
                
                if i == l_m and j == l_n:
                    dp[j] = curr_val
                    continue 
                    
                down_min = dp[j] if i!=l_m else float('inf')
                right_min = dp[j+1] if j!=l_n else float('inf')
                
                dp[j] = curr_val + min(down_min, right_min)
                    
        return dp[0]
    
# DP - Bottom Up
# O(m*n) / O(1)
class Solution:
    def minPathSum(self, grid: List[List[int]]) -> int:
        
        m = len(grid)
        n = len(grid[0]) if m else 0
        
        l_m = m-1
        l_n = n-1
        
        for i in range(l_m, -1, -1):
            for j in range(l_n, -1, -1):
                
                curr_val = grid[i][j]
                
                if i == l_m and j == l_n:
                    grid[i][j] = curr_val
                    continue 
                    
                down_min = grid[i+1][j] if i!=l_m else float('inf')
                right_min = grid[i][j+1] if j!=l_n else float('inf')
                
                grid[i][j] = curr_val + min(down_min, right_min)
                    
        return grid[0][0]
