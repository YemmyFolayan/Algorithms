# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# O(n) / O(n)
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        curr, visited = head, set()
        while curr:
            if curr in visited: return True
            visited.add(curr)
            curr = curr.next
        return False

# O(n) / O(1)
class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if not head or not head.next: return False
        slow, fast = head.next, head.next.next
        while slow != fast:
            if not fast or not fast.next: return False
            slow = slow.next
            fast = fast.next.next
        return True
