# O(logn + k) / O(logn)
class Solution:
    def kthSmallest(self, root: TreeNode, k: int) -> int:
        stack = []
        visited = 0
        curr_node = root

        while True:
            while curr_node:
                stack.append(curr_node)
                curr_node = curr_node.left

            # pop and visit node
            curr_node = stack.pop()
            visited +=1

            # base case
            if visited == k:
                return curr_node.val

            # add right
            curr_node = curr_node.right
