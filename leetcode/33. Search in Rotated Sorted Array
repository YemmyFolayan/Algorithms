# O(logn) / O(1)
class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        l = 0
        r = len(nums)-1
        
        while l <= r:
            
            mid = l+(r-l)//2
            curr_num = nums[mid]
            
            if curr_num == target:
                return mid
            
            # not found, check for pivot
            if curr_num >= nums[l]:
                if target >= nums[l] and target < curr_num:
                    r = mid-1
                else:
                    l = mid+1
            else:
                if target <= nums[r] and target > curr_num:
                    l = mid+1
                else: 
                    r = mid-1
            
        return -1

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        pivot = self.findPivot(0, len(nums) - 1, nums)
        
        if pivot == -1:
            return self.binary(0, len(nums) - 1, nums, target)
        elif target >= nums[0]:
            return self.binary(0, pivot + 1, nums, target)
        return self.binary(pivot + 1, len(nums) - 1, nums, target)
        
    def findPivot(self, l, r, nums):
        if len(nums) == 0: return -1
        if r - l == 0 and (l == 0 or r == len(nums) - 1): return -1 
        
        c = l + (r - l) // 2
        
        if nums[c] > nums[c + 1]: return c
        elif nums[c] < nums [c - 1]: return c - 1
        elif nums[l] > nums[c]: return self.findPivot(l, c - 1, nums)
        return self.findPivot(c + 1, r, nums)
        
    def binary(self, l, r, nums, target):
        if l > r: return -1
        
        c = l + (r - l) // 2
        
        if target == nums[c]: return c
        elif target < nums[c]: return self.binary(l, c - 1, nums, target)
        else: return self.binary(c + 1, r, nums, target)
