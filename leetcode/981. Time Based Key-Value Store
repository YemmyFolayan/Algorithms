class TimeMap:

    # O(n)
    def __init__(self):
        self.store = defaultdict(list)
        
    # O(1)
    def set(self, key: str, value: str, timestamp: int) -> None:
        
        self.store[key].append((value, timestamp))
         
    # O(logn)
    def get(self, key: str, timestamp: int) -> str:
        
        curr_values = self.store[key]
        
        l, r = 0, len(curr_values)-1
        
        while l <= r:
            
            mid = l+(r-l)//2
            
            value, prev_time = curr_values[mid]
            isLast = mid == len(curr_values)-1
            
            if prev_time <= timestamp and (isLast or curr_values[mid+1][1] > timestamp):
                return value
        
            if prev_time > timestamp:
                r = mid-1
            else:
                l = mid+1
                
        return ''
