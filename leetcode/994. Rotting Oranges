# O(m*n) / O(m*n)
class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:

        m, n = len(grid), len(grid[0])
        queue = collections.deque()
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 2:
                    queue.append((i, j, 0))
                    
        minute = 0
        while queue:
            i, j, minute = queue.popleft()
            for x, y in [(0,1),(1,0),(-1,0),(0,-1)]:
                a, b = x+i, y+j
                in_bounds = 0 <= a < m and 0 <= b < n
                if in_bounds and grid[a][b] == 1:
                    grid[a][b] = 2
                    queue.append((a, b, minute+1))
                    
        return -1 if any(1 in row for row in grid) else minute
