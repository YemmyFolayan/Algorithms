# O(nlogk) / O(n)
class FreqWord:
    def __init__(self, count, word):
        self.count = count
        self.word = word
        
    def __lt__(self, other):
        if self.count == other.count:
            return self.word > other.word
        return self.count < other.count
    
    def __eq__(self, other):
        return self.count == other.count and self.word == other.word

class Solution:
    def topKFrequent(self, words: List[str], k: int) -> List[str]:
        
        w_freq = Counter(words)
        heap = []
        heapq.heapify(heap)    

        for w, c in w_freq.items():
            toPush = FreqWord(c, w)
            
            if len(heap) < k:
                heapq.heappush(heap, toPush)
            else:
                heapq.heappushpop(heap, toPush)   

        sol = [heapq.heappop(heap).word for _ in range(k)]

        return sol[::-1]
