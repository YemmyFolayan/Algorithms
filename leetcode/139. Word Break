# O(n^2) / O(n)
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        return self.findWords(s, set(wordDict), {})
    
    def findWords(self, s, dictionary, cache):
        
        if not s:
            return True
        
        if s in cache:
            return cache[s]
        
        for i in range(1, len(s)+1):
            if s[:i] in dictionary:
                if self.findWords(s[i:], dictionary, cache):
                    cache[s] = True
                    return True
                
        cache[s] = False
        return False
        
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        return self.findSub(s, wordDict, {}, 0)
    
    def findSub(self, s, d, c, i):
        if i == len(s):
            return True
        if i in c:
            return c[i]
        for w in d:
            if s[i:i+len(w)] == w and self.findSub(s, d, c, i+len(w)):
                c[i] = True
                return True
        c[i] = False
        return False
                
# O(n^2) / O(n) - DP
class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        dict, cache, size = set(wordDict), defaultdict(bool), len(s)
        cache[0] = True
        for r in range(1, size+1):
            for l in range(0, r):
                if l in cache and s[l:r] in dict:
                    cache[r] = True
                    break
        return cache[size]
