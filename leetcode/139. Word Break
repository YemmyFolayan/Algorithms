class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        # inter through checking if it's in dict
        # if is call again assuming that's the word
        #   if that returns true return
        # else keep going, if we get to the end...return false
        return self.helper(s, set(wordDict), {})
        
    def helper(self, word, dict, cache):
        n = len(word)
        for i in range(1, n+1):
            if word in cache: return cache[word]
            if word[0:i] in dict:
                if i == n or self.helper(word[i:], dict, cache): 
                    cache[word] = True
                    return True
        cache[word] = False
        return False
