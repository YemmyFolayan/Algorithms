# O(nlogn) / O(1)
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda interval: interval[0])
        write = -1 
        
        for read in intervals:
            if write == -1 or intervals[write][1] < read[0]:
                write+=1
                intervals[write][0] = read[0]
            intervals[write][1] = max(intervals[write][1], read[1])
            
        return intervals[:write+1]

# O(nlogn) / O(1)
class Solution:
    def merge(self, intervals: List[List[int]]) -> List[List[int]]:

        intervals.sort(key=lambda interval: interval[0])
        merged_intervals = []
        
        for curr_interval in intervals:
            
            if merged_intervals and merged_intervals[-1][1] >= curr_interval[0]:
                merged_intervals[-1][1] = max(merged_intervals[-1][1], curr_interval[1])
                continue
                
            merged_intervals.append(curr_interval)
            
        return merged_intervals
