# O(klogn) / O(n)
class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        
        heap = [(sqrt(x**2 + y**2), (x,y)) for x, y in points]
        heapq.heapify(heap)
        
        ans = []
        for _ in range(K):
            ans.append(heapq.heappop(heap)[1])
        
        return ans

# O(nlogk) / O(k)
class Point:
    def __init__(self, pt):
        self.distance = -1*(pt[0]**2+pt[1]**2)
        self.pt = pt
        
    def __lt__(self, other):
        return self.distance < other.distance
        
    def __eq__(self, other):
        return self.distance == other.distance

class Solution:
    def kClosest(self, points: List[List[int]], K: int) -> List[List[int]]:
        
        heap = []
        heapq.heapify(heap)
        
        for pt in points:
            curr_pt = Point(pt)
            
            if len(heap) < K:
                heapq.heappush(heap, curr_pt)
            else:
                heapq.heappushpop(heap, curr_pt)
                
        return [pt.pt for pt in heap]
