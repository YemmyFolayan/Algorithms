# O(m*n) / O(m*n)
class Solution:
    def numDistinctIslands(self, grid: List[List[int]]) -> int:

        m, n = len(grid), len(grid[0])
        unique_islands = set()
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    curr_island = []
                    self.dfs(grid, m, n, i, j, curr_island)
                    unique_islands.add(''.join(curr_island))
                    
        return len(unique_islands)
    
    def dfs(self, grid, m, n, i, j, path):

        grid[i][j] = 0
        
        for x, y, d in [(0,1,'R'),(-1,0,'U'),(0,-1,'L'),(1,0,'D')]:
            a, b = i+x, j+y
            in_bounds = 0 <= a < m and 0 <= b < n
            if in_bounds and grid[a][b] == 1:
                path.append(d)
                self.dfs(grid, m, n, a, b, path)
        
        path.append('-')
