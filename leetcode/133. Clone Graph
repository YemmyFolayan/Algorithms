"""
# Definition for a Node.
class Node:
    def __init__(self, val, neighbors):
        self.val = val
        self.neighbors = neighbors
"""
class Solution:
    # DFS
    def cloneGraph(self, node: 'Node') -> 'Node':
        clones = {}
        
        def dfs(curr):
            if curr in clones:
                return clones[curr]
            else:
                clones[curr] = Node(curr.val, [])
                clones[curr].neighbors = [dfs(n) for n in curr.neighbors]
                return clones[curr]
                
        return dfs(node)
        
    # BFS
    def cloneGraph(self, node: 'Node') -> 'Node':
        clones, q = {}, deque()
        
        clones[node] = Node(node.val, [])
        q.append(node)
        while q:
            curr = q.popleft()
            newNode = clones[curr]
            
            for n in curr.neighbors:
                if n in clones:
                    newNode.neighbors.append(clones[n])
                else:
                    clones[n] = Node(n.val, [])
                    newNode.neighbors.append(clones[n])
                    q.append(n)
                    
        return clones[node]        
